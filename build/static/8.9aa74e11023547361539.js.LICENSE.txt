/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the 
reference element's position.
*/

/* */

/* WEBPACK VAR INJECTION */

/* binding */

/* eslint-disable no-bitwise, no-cond-assign */

/* eslint-disable no-return-assign */

/* eslint-disable require-jsdoc, valid-jsdoc */

/* harmony default export */

/* harmony export (binding) */

/* harmony import */

/* reexport */

/* unused harmony export ThemeConsumer */

/* unused harmony export createBootstrapComponent */

/* unused harmony export onceSupported */

/* unused harmony export optionsSupported */

/* unused harmony export resolveContainerRef */

/* unused harmony export toModifierArray */

/* unused harmony export toModifierMap */

/*#__PURE__*/

/**
             * @returns {boolean}
             */

/**
         * @param {*} key
         * @param {*} value
         * @returns {void}
         */

/**
         * @param {*} key
         * @returns {*}
         */

/**
         * @param {*} key
         * @returns {void}
         */

/**
         * @param {Function} callback
         * @param {*} [ctx=null]
         * @returns {void}
         */

/**
         * @returns {void}
         */

/**
         * A list of connected observers.
         *
         * @private {Array<ResizeObserverSPI>}
         */

/**
         * Broadcasted height of content rectangle.
         *
         * @type {number}
         */

/**
         * Broadcasted width of content rectangle.
         *
         * @type {number}
         */

/**
         * Collection of resize observations that have detected changes in dimensions
         * of elements.
         *
         * @private {Array<ResizeObservation>}
         */

/**
         * Indicates whether DOM listeners have been added.
         *
         * @private {boolean}
         */

/**
         * Keeps reference to the instance of MutationObserver.
         *
         * @private {MutationObserver}
         */

/**
         * Reference to the last observed content rectangle.
         *
         * @private {DOMRectInit}
         */

/**
         * Registry of the ResizeObservation instances.
         *
         * @private {Map<Element, ResizeObservation>}
         */

/**
         * Tells that controller has subscribed for Mutation Events.
         *
         * @private {boolean}
         */

/**
     * "Transitionend" event handler.
     *
     * @private
     * @param {TransitionEvent} event
     * @returns {void}
     */

/**
     * Adds observer to observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be added.
     * @returns {void}
     */

/**
     * Callback invoked after the specified delay. It will further postpone
     * invocation of the original function delegating it to the
     * requestAnimationFrame.
     *
     * @returns {void}
     */

/**
     * Clears the collection of active observations.
     *
     * @returns {void}
     */

/**
     * Collects observation instances the associated element of which has changed
     * it's content rectangle.
     *
     * @returns {void}
     */

/**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback function that is invoked
     *      when one of the observed elements changes it's content dimensions.
     * @param {ResizeObserverController} controller - Controller instance which
     *      is responsible for the updates of observer.
     * @param {ResizeObserver} callbackCtx - Reference to the public
     *      ResizeObserver instance which will be passed to callback function.
     */

/**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback that is invoked when
     *      dimensions of the observed elements change.
     */

/**
     * Creates a new instance of ResizeObserverController.
     *
     * @private
     */

/**
     * Creates an instance of ResizeObservation.
     *
     * @param {Element} target - Element to be observed.
     */

/**
     * Creates an instance of ResizeObserverEntry.
     *
     * @param {Element} target - Element that is being observed.
     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
     */

/**
     * Holds reference to the controller's instance.
     *
     * @private {ResizeObserverController}
     */

/**
     * Initializes DOM listeners.
     *
     * @private
     * @returns {void}
     */

/**
     * Invokes initial callback function with a list of ResizeObserverEntry
     * instances collected from active resize observations.
     *
     * @returns {void}
     */

/**
     * Invokes the original callback function and schedules new invocation if
     * the "proxy" was called during current request.
     *
     * @returns {void}
     */

/**
     * Invokes the update of observers. It will continue running updates insofar
     * it detects changes.
     *
     * @returns {void}
     */

/**
     * Removes DOM listeners.
     *
     * @private
     * @returns {void}
     */

/**
     * Removes observer from observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be removed.
     * @returns {void}
     */

/**
     * Returns index in provided array that matches the specified key.
     *
     * @param {Array<Array>} arr
     * @param {*} key
     * @returns {number}
     */

/**
     * Returns instance of the ResizeObserverController.
     *
     * @returns {ResizeObserverController}
     */

/**
     * Schedules invocation of the original function.
     *
     * @returns {void}
     */

/**
     * Starts observing provided element.
     *
     * @param {Element} target - Element to be observed.
     * @returns {void}
     */

/**
     * Stops observing all elements.
     *
     * @returns {void}
     */

/**
     * Stops observing provided element.
     *
     * @param {Element} target - Element to stop observing.
     * @returns {void}
     */

/**
     * Tells whether observer has active observations.
     *
     * @returns {boolean}
     */

/**
     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
     * from the corresponding properties of the last observed content rectangle.
     *
     * @returns {DOMRectInit} Last observed content rectangle.
     */

/**
     * Updates content rectangle and tells whether it's width or height properties
     * have changed since the last broadcast.
     *
     * @returns {boolean}
     */

/**
     * Updates every observer from observers list and notifies them of queued
     * entries.
     *
     * @private
     * @returns {boolean} Returns "true" if any observer has detected changes in
     *      dimensions of it's elements.
     */

/**
   * A Callback fired by the Overlay when it wishes to be hidden.
   *
   * __required__ when `rootClose` is `true`.
   *
   * @type func
   */

/**
   * A DOM Element, Ref to an element, or function that returns either. The `container` will have the Portal children
   * appended to it.
   */

/**
   * A DOM Element, Ref to an element, or function that returns either. The `target` element is where
   * the overlay is positioned relative to.
   */

/**
   * A `react-transition-group@2.0.0` `<Transition/>` component
   * used to animate the overlay as it changes visibility.
   */

/**
   * A render prop that returns an element to overlay and position. See
   * the [react-popper documentation](https://github.com/FezVrasta/react-popper#children) for more info.
   *
   * @type {Function ({
   *   show: boolean,
   *   placement: Placement,
   *   update: () => void,
   *   forceUpdate: () => void,
   *   props: {
   *     ref: (?HTMLElement) => void,
   *     style: { [string]: string | number },
   *     aria-labelledby: ?string
   *     [string]: string | number,
   *   },
   *   arrowProps: {
   *     ref: (?HTMLElement) => void,
   *     style: { [string]: string | number },
   *     [string]: string | number,
   *   },
   * }) => React.Element}
   */

/**
   * A set of popper options and props passed directly to react-popper's Popper component.
   */

/**
   * Callback fired after the Overlay finishes transitioning in
   */

/**
   * Callback fired after the Overlay finishes transitioning out
   */

/**
   * Callback fired as the Overlay begins to transition in
   */

/**
   * Callback fired as the Overlay begins to transition out
   */

/**
   * Callback fired before the Overlay transitions in
   */

/**
   * Callback fired right before the Overlay transitions out
   */

/**
   * Control how much space there is between the edge of the boundary element and overlay.
   * A convenience shortcut to setting `popperConfig.modfiers.preventOverflow.padding`
   */

/**
   * Enables the Popper.js `flip` modifier, allowing the Overlay to
   * automatically adjust it's placement in case of overlap with the viewport or toggle.
   * Refer to the [flip docs](https://popper.js.org/popper-documentation.html#modifiers..flip.enabled) for more info
   */

/**
   * If a prop switches from controlled to Uncontrolled
   * reset its value to the defaultValue
   */

/**
   * Set the visibility of the Overlay
   */

/**
   * Specify disabled for disable RootCloseWrapper
   */

/**
   * Specify event for toggling overlay
   */

/**
   * Specify whether the overlay should trigger `onHide` when the user clicks outside the overlay
   */

/**
 * A collection of shims that provide minimal functionality of the ES6 collections.
 *
 * These implementations are not meant to be used outside of the ResizeObserver
 * modules as they cover only a limited range of use cases.
 */

/**
 * A convenience hook around `useState` designed to be paired with
 * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.
 * Callback refs are useful over `useRef()` when you need to respond to the ref being set
 * instead of lazily accessing it in an effect.
 *
 * ```ts
 * const [element, attachRef] = useCallbackRef<HTMLDivElement>()
 *
 * useEffect(() => {
 *   if (!element) return
 *
 *   const calendar = new FullCalendar.Calendar(element)
 *
 *   return () => {
 *     calendar.destroy()
 *   }
 * }, [element])
 *
 * return <div ref={attachRef} />
 * ```
 *
 * @category refs
 */

/**
 * An `addEventListener` ponyfill, supports the `once` option
 */

/**
 * Attach a callback that fires when a component unmounts
 *
 * @param fn Handler to run when the component unmounts
 * @category effects
 */

/**
 * Calculates an appropriate content rectangle for provided html or svg element.
 *
 * @param {Element} target - Element content rectangle of which needs to be calculated.
 * @returns {DOMRectInit}
 */

/**
 * Calculates content rectangle of provided HTMLElement.
 *
 * @param {HTMLElement} target - Element for which to calculate the content rectangle.
 * @returns {DOMRectInit}
 */

/**
 * Calculates content rectangle of provided SVG element.
 *
 * @param {SVGGraphicsElement} target - Element content rectangle of which needs
 *      to be calculated.
 * @returns {DOMRectInit}
 */

/**
 * Checks whether provided element is a document element (<html>).
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */

/**
 * Checks whether provided element is an instance of the SVGGraphicsElement.
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */

/**
 * Class that is responsible for computations of the content rectangle of
 * provided DOM element and for keeping track of it's changes.
 */

/**
 * Converts provided string to a number.
 *
 * @param {number|string} value
 * @returns {number}
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/hyphenateStyleName.js
 */

/**
 * Create and returns a single callback ref composed from two other Refs.
 *
 * ```tsx
 * const Button = React.forwardRef((props, ref) => {
 *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();
 *   const mergedRef = useMergedRefs(ref, attachRef);
 *
 *   return <button ref={mergedRef} {...props}/>
 * })
 * ```
 *
 * @param refA A Callback or mutable Ref
 * @param refB A Callback or mutable Ref
 * @category refs
 */

/**
 * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
 * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
 *
 * @param {number} x - X coordinate.
 * @param {number} y - Y coordinate.
 * @param {number} width - Rectangle's width.
 * @param {number} height - Rectangle's height.
 * @returns {DOMRectInit}
 */

/**
 * Creates a `Ref` whose value is updated in an effect, ensuring the most recent
 * value is the one rendered with. Generally only required for Concurrent mode usage
 * where previous work in `render()` may be discarded befor being used.
 *
 * This is safe to access in an event handler.
 *
 * @param value The `Ref` value
 */

/**
 * Creates a wrapper function which ensures that provided callback will be
 * invoked only once during the specified delay period.
 *
 * @param {Function} callback - Function to be invoked after the delay period.
 * @param {number} delay - Delay after which to invoke callback.
 * @returns {Function}
 */

/**
 * Creates rectangle with an interface of the DOMRectReadOnly.
 * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
 *
 * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
 * @returns {DOMRectReadOnly}
 */

/**
 * Detects whether window and document objects are available in current environment.
 */

/**
 * Extracts borders size from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @param {...string} positions - Borders positions (top, right, ...)
 * @returns {number}
 */

/**
 * Extracts paddings sizes from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @returns {Object} Paddings box.
 */

/**
 * Position an element relative some reference element using Popper.js
 *
 * @param referenceElement
 * @param popperElement
 * @param {object}      options
 * @param {object=}     options.modifiers Popper.js modifiers
 * @param {boolean=}    options.enabled toggle the popper functionality on/off
 * @param {string=}     options.placement The popper element placement relative to the reference element
 * @param {string=}     options.strategy the positioning strategy
 * @param {boolean=}    options.eventsEnabled have Popper listen on window resize events to reposition the element
 * @param {function=}   options.onCreate called when the popper is created
 * @param {function=}   options.onUpdate called when the popper is updated
 *
 * @returns {UsePopperState} The popper state
 */

/**
 * Returns a controller object for setting a timeout that is properly cleaned up
 * once the component unmounts. New timeouts cancel and replace existing ones.
 */

/**
 * Returns a ref that is immediately updated with the new value
 *
 * @param value The Ref value
 * @category refs
 */

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

/**
 * The `useRootClose` hook registers your callback on the document
 * when rendered. Powers the `<Overlay/>` component. This is used achieve modal
 * style behavior where your callback is triggered when the user tries to
 * interact with the rest of the document or hits the `esc` key.
 *
 * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary
 * @param {function} onRootClose
 * @param {object=}  options
 * @param {boolean=} options.disabled
 * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on
 */

/**
 * Track whether a component is current mounted. Generally less preferable than
 * properlly canceling effects so they don't run after a component is unmounted,
 * but helpful in cases where that isn't feasible, such as a `Promise` resolution.
 *
 * @returns a function that returns the current isMounted state of the component
 *
 * ```ts
 * const [data, setData] = useState(null)
 * const isMounted = useMounted()
 *
 * useEffect(() => {
 *   fetchdata().then((newData) => {
 *      if (isMounted()) {
 *        setData(newData);
 *      }
 *   })
 * })
 * ```
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

/** @class */

/** Specify where the overlay element is positioned in relation to the target element */

/***/

/*:: declare function getWindow(node: Node | Window): Window; */

/*:: declare function isElement(node: mixed): boolean %checks(node instanceof
  Element); */

/*:: declare function isHTMLElement(node: mixed): boolean %checks(node instanceof
  HTMLElement); */

/*:: import type { Window } from '../types'; */

/*:: offsetParent = (offsetParent: Element); */

/*:: type OverflowsMap = { [ComputedPlacement]: number }; */

/*;; type OverflowsMap = { [key in ComputedPlacement]: number }; */

//

//         nextStatus = ENTERING

//         nextStatus = EXITING

//       if (status !== ENTERING && status !== ENTERED) {

//       if (status === ENTERING || status === ENTERED) {

//       }

//     const { status } = this.state

//     if (this.props.in) {

//     }

//     } else {

//   if (prevProps !== this.props) {

//   let nextStatus = null

//   return { nextStatus }

//   }

// $FlowFixMe: Flow seems to have problems with two array unions...

// $FlowFixMe: HTMLElement is a Node

// $FlowFixMe: assume body is always available

// $FlowFixMe: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it

// $FlowFixMe: hasOwnProperty doesn't seem to work in tests

// $FlowFixMe: https://github.com/facebook/flow/issues/1414

// $FlowFixMe: isBody tells us target will be an HTMLElement here

// $FlowFixMe: need a better way to handle this...

// $FlowFixMe: this is a quicker (but less type safe) way to save quite some bytes from the bundle

// 0.001

// 314px. And it doesn't happen all the time. So just ignore this delta

// @ts-ignore

// A "clipping parent" is an overflowable container with the characteristic of

// A list of substrings of CSS properties used to find transition events that

// According to the specification following properties are not writable

// Add listeners if they haven't been added yet.

// Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even

// Async and optimistically optimized update – it will not be executed if

// Besides, it's as well not necessary as the <html> itself neither has

// Browsers where the left scrollbar doesn't cause an issue report `0` for

// By this condition we can catch all non-replaced inline, hidden and

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/createPopper.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/contains.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindow.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/enums.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/arrow.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/computeStyles.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/eventListeners.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/flip.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/hide.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/offset.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/computeOffsets.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/debounce.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/detectOverflow.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/expandToHashMap.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getAltAxis.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getBasePlacement.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getVariation.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/mergeByName.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/orderModifiers.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/rectToClientRect.js

// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/within.js

// CONCATENATED MODULE: ./node_modules/@restart/hooks/esm/useCommittedRef.js

// CONCATENATED MODULE: ./node_modules/@restart/hooks/esm/useEventCallback.js

// CONCATENATED MODULE: ./node_modules/@restart/hooks/esm/useSafeState.js

// CONCATENATED MODULE: ./node_modules/@restart/hooks/esm/useUpdatedRef.js

// CONCATENATED MODULE: ./node_modules/@restart/hooks/esm/useWillUnmount.js

// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/css.js

// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/getComputedStyle.js

// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/hyphenate.js

// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/hyphenateStyle.js

// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/isTransform.js

// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/ownerWindow.js

// CONCATENATED MODULE: ./node_modules/react-bootstrap/esm/Fade.js

// CONCATENATED MODULE: ./node_modules/react-bootstrap/esm/Overlay.js

// CONCATENATED MODULE: ./node_modules/react-bootstrap/esm/OverlayTrigger.js

// CONCATENATED MODULE: ./node_modules/react-bootstrap/esm/triggerBrowserReflow.js

// CONCATENATED MODULE: ./node_modules/react-bootstrap/esm/usePopperMarginModifiers.js

// CONCATENATED MODULE: ./node_modules/react-overlays/esm/popper.js

// CSS selector

// Chrome has a rather weird rounding of "client" properties.

// Client width & height properties can't be

// Collect observers that have active observations.

// Composite means it takes into account transforms as well as layout.

// Continue running updates if changes have been detected as there might

// Create ResizeObserverEntry instance for every active observation.

// DOM Element detected

// Deliver notifications in a separate cycle in order to avoid any

// Detect whether transition may affect dimensions of an element.

// Do nothing if current environment doesn't have the Element interface.

// Do nothing if element is already being observed.

// Do nothing if element is not being observed.

// Do nothing if observer doesn't have active observations.

// Do nothing if running in a non-browser environment or if listeners

// Don't bother showing anything if we don't have to.

// Don't proceed if `reference` or `popper` are not valid elements

// Don't un-render the overlay while it's transitioning out.

// E.g. for an element with content width of 314.2px it sometimes gives

// EXPORTS

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// EXTERNAL MODULE: ./node_modules/dom-helpers/esm/contains.js

// EXTERNAL MODULE: ./node_modules/dom-helpers/esm/hasClass.js

// EXTERNAL MODULE: ./node_modules/dom-helpers/esm/listen.js

// EXTERNAL MODULE: ./node_modules/dom-helpers/esm/ownerDocument.js

// EXTERNAL MODULE: ./node_modules/react-bootstrap/esm/Fade.js + 4 modules

// EXTERNAL MODULE: ./node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js

// EXTERNAL MODULE: ./node_modules/react-overlays/esm/popper.js + 49 modules

// EXTERNAL MODULE: ./node_modules/react-overlays/esm/safeFindDOMNode.js

// EXTERNAL MODULE: ./node_modules/react/index.js

// EXTERNAL MODULE: ./node_modules/warning/warning.js

// Export existing implementation if available.

// Expose public methods of ResizeObserver.

// Fallback here: "Not Safari" userAgent

// Feature detection fails in mobile emulation mode in Chrome.

// Firefox wants us to check `-x` and `-y` variations as well

// First, attempt with faster native method

// Following conditions are required to handle Internet Explorer which

// Following steps can't be applied to the document's root element as its

// For high frequency updates (e.g. `resize` and `scroll` events), always

// For simplicity, if the timeout is short, just set a normal timeout.

// For the common JS build we will turn this file into a bundle with no imports.

// Force the update of observations.

// Gets the closest ancestor positioned element. Handles some edge cases,

// Gets the entire size of the scrollable document area, even extending outside

// Gets the maximum area that the element is visible in due to any number of

// Give up, the result is false

// HTML DOM and SVG DOM may have different support levels,

// IE11 does not support Object.values

// If <html> has a CSS width greater than the viewport, then this will be

// In Chrome, it returns a value very close to 0 (+/-) but contains rounding

// In some browsers (only in Firefox, actually) CSS width & height

// In the context of a TransitionGroup all enters are really appears

// Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <

// Minimum delay before invoking the update of observers.

// Modifiers have the ability to reset the current update cycle. The

// NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper

// Name the function so it is clearer in the documentation

// Offsets are the actual position the popper needs to have to be

// Offsets can be applied only to the popper element

// On each update cycle, the `modifiersData` property for each modifier

// On visiting object, check for its dependencies and visit them recursively

// Orders the modifiers based on their dependencies and `phase`

// Popper 1 is broken in this case and never had a bug report so let's assume

// Property accessors are not being used as they'd require to define a

// React's built version is broken: https://github.com/facebook/react/issues/4251

// Rectangle's properties are not writable and non-enumerable.

// Reject immediately following calls.

// Remove listeners if controller has no connected observers.

// Remove observer if it's present in registry.

// ResizeObserver are tracking the same element and the callback of one

// Return the local global object if it's not possible extract one from

// Returns the composite rect of an element relative to its offsetParent.

// Returns the layout rect of an element relative to its offsetParent. Layout

// Round the offsets to the nearest suitable subpixel based on the DPR.

// Safari returns a number <= 0, usually < -1 when pinch-zoomed

// Schedule new call to be in invoked when the pending one is resolved.

// ShadowRoot detected

// Simple implementation of mouseEnter and mouseLeave.

// Some browsers, namely IE and Edge, don't have the SVGGraphicsElement

// Store the reference and popper rects to be read by modifiers

// Strip out disabled modifiers

// Subscription to the "Transitionend" event is used as a workaround for

// Sync update – it will always be executed, even if not necessary. This

// TODO: remove fallback for next major

// This is b/c the Popper lib is all esm files, and would break in a common js only environment

// This is important for "transitions" which never actually start

// This is non-exhaustive but covers the most common CSS properties that

// This is only run once to _create_ the popper

// This is the most basic placement, and will be adjusted by

// This shouldn't be necessary, but there are weird race conditions with

// To ensure persistent data, use `${name}#persistent`

// UNUSED EXPORTS: useUncontrolled, uncontrollable

// Use capture for this listener so it fires before React's listener, to

// Uses Layout Viewport (like Chrome; Safari does not currently)

// We can say that if CSS dimensions + paddings are equal to the "client"

// Width & height include paddings and borders when the 'border-box' box

// Without it we would need to implement separate methods for each of

// Zooming can change the DPR, but it seems to report a value that will

// `.offsetParent` reports `null` for fixed elements, while absolute elements

// `2` may be desired in some cases – research later

// `initial`

// allows for nested Transitions

// and "client" properties, though that is not always true in Chrome.

// and are also not enumerable in the native implementation.

// anymore

// anything, or an element merely doesn't have paddings/borders styles.

// anyway.

// as a non-relevant.

// avoid false positives in the contains() check below if the target DOM

// bars are the only difference between rounded dimensions + paddings

// be future ones caused by CSS transitions.

// can be obscured underneath it.

// check for visited object

// cleanly divide the values into the appropriate subpixels.

// client[Width/Height] properties represent viewport area of the window.

// clipping (or hiding) overflowing elements with a position different from

// clipping parents

// collisions between observers, e.g. when multiple instances of

// create a containing block.

// delayed transitions. This way it's possible to capture at least the

// detached elements. Though elements with width & height properties less

// doesn't include paddings and borders to computed CSS dimensions.

// don't support this type of collections.

// effective test for hidden elements. E.g. even jQuery's ':visible' filter

// element is removed in the React mouse callback.

// errors due to floating point numbers, so we need to check precision.

// eslint-disable-next-line @typescript-eslint/no-unused-expressions

// eslint-disable-next-line import/no-unused-modules

// eslint-disable-next-line no-multi-assign

// eslint-disable-next-line no-unused-expressions

// eslint-disable-next-line react-hooks/exhaustive-deps

// final state of an element.

// for cases when the trigger is disabled and mouseOut/Over can cause flicker

// getSnapshotBeforeUpdate(prevProps) {

// gives wrong results for elements with width & height less than 0.5.

// happens amids the pending invocation.

// have been already added.

// have been already removed.

// https://github.com/popperjs/popper-core/issues/1078

// https://github.com/popperjs/popper-core/issues/837

// if it isn't open, so if this isn't available, the popper will be detected

// if we are mounting and running this it means appear _must_ be set

// immediately so there is a chance that we might miss one if change

// include scroll bars size which can be removed at this step as scroll

// incorrect for RTL.

// interface.

// is filled with the initial data specified by the modifier. This means

// is useful for low frequency updates where sync behavior simplifies the

// it doesn't persist and is fresh on each update.

// it's not an issue. I don't think anyone ever specifies width on <html>

// logic was previously ran for the previous placement and is therefore

// logic.

// means it doesn't take into account transforms.

// might affect dimensions of observed elements.

// model is applied (except for IE).

// most common use case for this is the `flip` modifier changing the

// moving from one child element to another.

// nextStatus will always be ENTERING or EXITING.

// no enter animation skip right to ENTERED

// no exit animation skip right to EXITED

// not necessary (debounced to run at most once-per-tick)

// of the `<html>` and `<body>` rect bounds if horizontally scrollable

// of them changes content dimensions of the observed target. Sometimes

// order based on dependencies

// order based on phase

// placement, which then needs to re-run all the modifiers, because the

// prefer the async Popper#update method

// private WeakMap storage which may cause memory leaks in browsers that

// properly positioned near its reference element

// properties

// properties then it's either IE, and thus we don't need to subtract

// provided element.

// reading a dimension prop will cause the browser to recalculate,

// rendered scroll bars nor it can be clipped.

// return the containing block

// setState callbacks and unmounting in testing, so always make sure that

// so we need to check on context instead of a document root element.

// source: https://stackoverflow.com/questions/49875255

// stale/incorrect

// step into the shadow DOM of the parent of a slotted node

// such as table ancestors and cross browser bugs.

// than 0.5 will be discarded as well.

// the client width of 315px and for the width of 314.7px it may give

// the modifiers in the next step

// this (e.g. Edge 2019, IE11, Safari)

// this may result in notifications being blocked for the rest of observers.

// those cases and it's not possible to perform a precise and performance

// to overflow the bottom of the screen too early.

// types are confused between node and web here IDK

// used exclusively as they provide rounded values.

// we can cancel any pending setState callbacks after we unmount.

// we don't care about invariant's own frame

// which will let our animations work

// }
